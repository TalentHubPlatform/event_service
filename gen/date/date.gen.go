// Package date_api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package date

import (
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Date defines model for Date.
type Date struct {
	DateEnd   time.Time `json:"date_end"`
	DateStart time.Time `json:"date_start"`
}

// DateResponse defines model for DateResponse.
type DateResponse struct {
	DateEnd   time.Time `json:"date_end"`
	DateStart time.Time `json:"date_start"`
	Id        *int      `json:"id,omitempty"`
}

// DateUpdate defines model for DateUpdate.
type DateUpdate struct {
	DateEnd   *time.Time `json:"date_end,omitempty"`
	DateStart *time.Time `json:"date_start,omitempty"`
}

// Id defines model for Id.
type Id = int

// PostDatesJSONRequestBody defines body for PostDates for application/json ContentType.
type PostDatesJSONRequestBody = Date

// PutDatesIdJSONRequestBody defines body for PutDatesId for application/json ContentType.
type PutDatesIdJSONRequestBody = DateUpdate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получить все даты
	// (GET /dates)
	GetDates(ctx echo.Context) error
	// Создать дату
	// (POST /dates)
	PostDates(ctx echo.Context) error
	// Удалить дату по id
	// (DELETE /dates/{Id})
	DeleteDatesId(ctx echo.Context, id Id) error
	// Получить дату по id
	// (GET /dates/{Id})
	GetDatesId(ctx echo.Context, id Id) error
	// Изменить дату по id
	// (PUT /dates/{Id})
	PutDatesId(ctx echo.Context, id Id) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDates converts echo context to params.
func (w *ServerInterfaceWrapper) GetDates(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDates(ctx)
	return err
}

// PostDates converts echo context to params.
func (w *ServerInterfaceWrapper) PostDates(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDates(ctx)
	return err
}

// DeleteDatesId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDatesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "Id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "Id", runtime.ParamLocationPath, ctx.Param("Id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDatesId(ctx, id)
	return err
}

// GetDatesId converts echo context to params.
func (w *ServerInterfaceWrapper) GetDatesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "Id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "Id", runtime.ParamLocationPath, ctx.Param("Id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDatesId(ctx, id)
	return err
}

// PutDatesId converts echo context to params.
func (w *ServerInterfaceWrapper) PutDatesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "Id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "Id", runtime.ParamLocationPath, ctx.Param("Id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutDatesId(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/dates", wrapper.GetDates)
	router.POST(baseURL+"/dates", wrapper.PostDates)
	router.DELETE(baseURL+"/dates/:Id", wrapper.DeleteDatesId)
	router.GET(baseURL+"/dates/:Id", wrapper.GetDatesId)
	router.PUT(baseURL+"/dates/:Id", wrapper.PutDatesId)

}

// Package status_api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package status_api

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Status defines model for Status.
type Status struct {
	Title string `json:"title"`
}

// StatusResponse defines model for StatusResponse.
type StatusResponse struct {
	Id    *int   `json:"id,omitempty"`
	Title string `json:"title"`
}

// StatusUpdate defines model for StatusUpdate.
type StatusUpdate struct {
	Title *string `json:"title,omitempty"`
}

// Id defines model for Id.
type Id = int

// PostStatusJSONRequestBody defines body for PostStatus for application/json ContentType.
type PostStatusJSONRequestBody = Status

// PutStatusIdJSONRequestBody defines body for PutStatusId for application/json ContentType.
type PutStatusIdJSONRequestBody = StatusUpdate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получить все статусы
	// (GET /status)
	GetStatus(ctx echo.Context) error
	// Создать статус
	// (POST /status)
	PostStatus(ctx echo.Context) error
	// Удалить статус по id
	// (DELETE /status/{Id})
	DeleteStatusId(ctx echo.Context, id Id) error
	// Получить статус по Id
	// (GET /status/{Id})
	GetStatusId(ctx echo.Context, id Id) error
	// Изменить статус по id
	// (PUT /status/{Id})
	PutStatusId(ctx echo.Context, id Id) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// PostStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostStatus(ctx)
	return err
}

// DeleteStatusId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteStatusId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "Id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "Id", runtime.ParamLocationPath, ctx.Param("Id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteStatusId(ctx, id)
	return err
}

// GetStatusId converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatusId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "Id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "Id", runtime.ParamLocationPath, ctx.Param("Id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStatusId(ctx, id)
	return err
}

// PutStatusId converts echo context to params.
func (w *ServerInterfaceWrapper) PutStatusId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "Id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "Id", runtime.ParamLocationPath, ctx.Param("Id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutStatusId(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/status", wrapper.GetStatus)
	router.POST(baseURL+"/status", wrapper.PostStatus)
	router.DELETE(baseURL+"/status/:Id", wrapper.DeleteStatusId)
	router.GET(baseURL+"/status/:Id", wrapper.GetStatusId)
	router.PUT(baseURL+"/status/:Id", wrapper.PutStatusId)

}

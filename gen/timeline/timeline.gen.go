// Package timeline_api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package timeline_api

import (
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Timeline defines model for Timeline.
type Timeline struct {
	Deadline         time.Time `json:"deadline"`
	Description      string    `json:"description"`
	IsBlocking       bool      `json:"is_blocking"`
	Status           string    `json:"status"`
	TimelineStatusId int       `json:"timeline_status_id"`
	Title            string    `json:"title"`
	TrackId          int       `json:"track_id"`
}

// TimelineResponse defines model for TimelineResponse.
type TimelineResponse struct {
	Deadline         time.Time `json:"deadline"`
	Description      string    `json:"description"`
	Id               *int      `json:"id,omitempty"`
	IsBlocking       bool      `json:"is_blocking"`
	Status           string    `json:"status"`
	TimelineStatusId int       `json:"timeline_status_id"`
	Title            string    `json:"title"`
	TrackId          int       `json:"track_id"`
}

// TimelineStatusResponse defines model for TimelineStatusResponse.
type TimelineStatusResponse struct {
	CountNum int `json:"count_num"`
}

// TimelineUpdate defines model for TimelineUpdate.
type TimelineUpdate struct {
	Deadline         *time.Time `json:"deadline,omitempty"`
	Description      *string    `json:"description,omitempty"`
	IsBlocking       *string    `json:"is_blocking,omitempty"`
	Status           *string    `json:"status,omitempty"`
	TimelineStatusId *int       `json:"timeline_status_id,omitempty"`
	Title            *string    `json:"title,omitempty"`
	TrackId          *int       `json:"track_id,omitempty"`
}

// Id defines model for Id.
type Id = int

// Status defines model for Status.
type Status = string

// XTrackId defines model for XTrackId.
type XTrackId = int

// GetTimelineParams defines parameters for GetTimeline.
type GetTimelineParams struct {
	// Status Статус
	Status *Status `form:"Status,omitempty" json:"Status,omitempty"`

	// XTrackId Header идентификатор трека
	XTrackId *XTrackId `json:"XTrackId,omitempty"`
}

// PostTimelineJSONRequestBody defines body for PostTimeline for application/json ContentType.
type PostTimelineJSONRequestBody = Timeline

// PutTimelineIdJSONRequestBody defines body for PutTimelineId for application/json ContentType.
type PutTimelineIdJSONRequestBody = TimelineUpdate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получить все статусы таймлайн статусов
	// (GET /timelime/status)
	GetTimelimeStatus(ctx echo.Context) error
	// Создать таймлайн статус
	// (POST /timelime/status)
	PostTimelimeStatus(ctx echo.Context) error
	// Получить таймлайн поинты по треку и статусу
	// (GET /timeline)
	GetTimeline(ctx echo.Context, params GetTimelineParams) error
	// Создать таймлайн поинт
	// (POST /timeline)
	PostTimeline(ctx echo.Context) error
	// Изменить таймлайн поинт по Id
	// (DELETE /timeline/{Id})
	DeleteTimelineId(ctx echo.Context, id Id) error
	// Получить таймлайн поинт по Id
	// (GET /timeline/{Id})
	GetTimelineId(ctx echo.Context, id Id) error
	// Изменить таймлайн поинт по Id
	// (PUT /timeline/{Id})
	PutTimelineId(ctx echo.Context, id Id) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetTimelimeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetTimelimeStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTimelimeStatus(ctx)
	return err
}

// PostTimelimeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostTimelimeStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTimelimeStatus(ctx)
	return err
}

// GetTimeline converts echo context to params.
func (w *ServerInterfaceWrapper) GetTimeline(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTimelineParams
	// ------------- Optional query parameter "Status" -------------

	err = runtime.BindQueryParameter("form", true, false, "Status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Status: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "XTrackId" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("XTrackId")]; found {
		var XTrackId XTrackId
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for XTrackId, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "XTrackId", runtime.ParamLocationHeader, valueList[0], &XTrackId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter XTrackId: %s", err))
		}

		params.XTrackId = &XTrackId
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTimeline(ctx, params)
	return err
}

// PostTimeline converts echo context to params.
func (w *ServerInterfaceWrapper) PostTimeline(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTimeline(ctx)
	return err
}

// DeleteTimelineId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTimelineId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "Id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "Id", runtime.ParamLocationPath, ctx.Param("Id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTimelineId(ctx, id)
	return err
}

// GetTimelineId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTimelineId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "Id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "Id", runtime.ParamLocationPath, ctx.Param("Id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTimelineId(ctx, id)
	return err
}

// PutTimelineId converts echo context to params.
func (w *ServerInterfaceWrapper) PutTimelineId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "Id" -------------
	var id Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "Id", runtime.ParamLocationPath, ctx.Param("Id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutTimelineId(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/timelime/status", wrapper.GetTimelimeStatus)
	router.POST(baseURL+"/timelime/status", wrapper.PostTimelimeStatus)
	router.GET(baseURL+"/timeline", wrapper.GetTimeline)
	router.POST(baseURL+"/timeline", wrapper.PostTimeline)
	router.DELETE(baseURL+"/timeline/:Id", wrapper.DeleteTimelineId)
	router.GET(baseURL+"/timeline/:Id", wrapper.GetTimelineId)
	router.PUT(baseURL+"/timeline/:Id", wrapper.PutTimelineId)

}
